name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: read

env:
  POETRY_VERSION: "1.8.3"
  PYTHON_VERSION: "3.9"


jobs:

  build:
    name: Build and Release
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry v${{ env.POETRY_VERSION }}
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Python Semantic Release to prepare release
        id: release
        uses: python-semantic-release/python-semantic-release@v9.8.6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          if-no-files-found: 'error'



  publish-to-test-pypi:
    name: Publish to Test PyPI
    runs-on: ubuntu-latest
    needs:
      - build

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  test-installation-testpypi:
    name: Test installation from Test PyPI
    runs-on: ubuntu-latest
    needs:
      - publish-to-test-pypi
    steps:
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Installation test
        run: |
          pip install -i https://test.pypi.org/simple/ experiment-gh-actions
          python -c "import blabla; print('Package successfully installed')"


  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs:
      - test-installation-testpypi

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1


  publish-docs:
    name: Publish Docs
    runs-on: ubuntu-latest
    needs:
      - test-installation-testpypi

    permissions:
      id-token: write
      contents: write

    steps:
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Poetry v${{ env.POETRY_VERSION }}
        run: pipx install poetry==${{ env.POETRY_VERSION }}
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install dev dependencies
        run: poetry install --no-interaction --only=dev  # NOTE: this is needed for mkdocs etc
      - name: Build docs
        run: poetry run mkdocs build
      - name: Publish docs
        run: poetry run mkdocs gh-deploy  # Calls another workflow
